test                                    internship Task - RDBMS and SQL Task #1( University Database)
table creation:

-- Students Table
CREATE TABLE Student (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    date_of_birth DATE,
    enrollment_date DATE,
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

-- Courses Table
CREATE TABLE Courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(100) NOT NULL,
    department_id INT,
    professor_id INT,
    credits INT NOT NULL,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id),
    FOREIGN KEY (professor_id) REFERENCES Professors(professor_id)
);

-- Departments Table
CREATE TABLE Department (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL
);

-- Professors Table
CREATE TABLE Professors (
    professor_id INT PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone VARCHAR(20)
);

-- Enrollments Table
CREATE TABLE Enrollment (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    grade VARCHAR(5),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);
=====================================================================================================================
insert data :
-- Insert data into Department Table
INSERT INTO Departments (department_id, department_name) VALUES
(1, 'Computer Science'),
(2, 'Mathematics'),
(3, 'Physics');

-- Insert data into Professors Table
INSERT INTO Professors (professor_id, first_name, last_name, email, phone) VALUES
(1, 'John', 'Doe', 'jdoe@example.com', '123-456-7890'),
(2, 'Jane', 'Smith', 'jsmith@example.com', '987-654-3210'),
(3, 'Alice', 'Johnson', 'ajohnson@example.com', '456-789-1234');

-- Insert data into Courses Table
INSERT INTO Courses (course_id, course_name, department_id, professor_id, credits) VALUES
(1, 'Introduction to Programming', 1, 1, 4),
(2, 'Data Structures', 1, 1, 3),
(3, 'Calculus I', 2, 2, 4),
(4, 'Linear Algebra', 2, 2, 3),
(5, 'Quantum Mechanics', 3, 3, 4);

-- Insert data into Students Table
INSERT INTO Student (student_id, first_name, last_name, email, phone, date_of_birth, enrollment_date, department_id) VALUES
(1, 'Alice', 'Brown', 'abrown@example.com', '111-222-3333', '2000-05-15', '2022-08-15', 1),
(2, 'Bob', 'Green', 'bgreen@example.com', '222-333-4444', '1999-03-22', '2021-09-01', 2),
(3, 'Charlie', 'White', 'cwhite@example.com', '333-444-5555', '2001-07-10', '2023-01-10', 3);

-- Insert data into Enrollment Table
INSERT INTO Enrollments (enrollment_id, student_id, course_id, enrollment_date, grade) VALUES
(1, 1, 1, '2022-08-20', 'A'),
(2, 1, 2, '2022-08-21', 'B+'),
(3, 2, 3, '2021-09-05', 'A-'),
(4, 2, 4, '2021-09-06', 'B'),
(5, 3, 5, '2023-01-12', 'A');
=====================================================================================================================
 --Query1. Find the Total Number of Students in Each Department

SELECT d.department_name, COUNT(s.student_id) AS total_students
FROM Department d
LEFT JOIN Student s ON d.department_id = s.department_id
GROUP BY d.department_name;

--Query2. List All Courses Taught by a Specific Professor

SELECT 
    c.course_name AS Course
FROM 
    Courses c
JOIN 
    Professors p
ON 
    c.professor_id = p.professor_id
   
WHERE 
    p.first_name = 'Rajesh' AND p.last_name = 'Verma';

--Query3. Find the Average Grade of Students in Each Course
SELECT c.course_name, AVG(CASE WHEN e.grade = 'A' THEN 4.0 WHEN e.grade = 'B+' THEN 3.5 WHEN e.grade = 'B' THEN 3.0 -- Add more mappings as needed ELSE 0 END) AS average_grade FROM Enrollment e INNER JOIN Courses c ON e.course_id = c.course_id GROUP BY c.course_name;

-- Query 4: list all studetns who have not enrolled in any course .
select s.first_name , s.last_name
from student as s
 left join enrollment e
on s.student_id = e.student_id
where e.enrollment_id is null;


-- Query 5: find the number of course offered by each department.
SELECT d.department_name, COUNT(c.course_id) AS total_courses
FROM Department d
LEFT JOIN Courses c ON d.department_id = c.department_id
GROUP BY d.department_name;


--Query 6: list all students who have taken a specific course (e.g. 'Database System').
select s.first_name , s.last_name 
from student s
join enrollment e on s.student_id=e.student_id
join courses c on e.course_id = c.course_id
where c.course_name = "Introduction to HR";


--Query 7: fiind the mosst popular course based on enrollment numbers.


select course_name , count(e.enrollment_id) as enrollment_count
from courses c
join enrollment e on c.course_id = e.course_id
group by course_name
order by enrollment_count desc
limit 1;

--Query 8: find the average number of credits per student in a department.

select d.department_name, avg(c.credits) as avg_count
from department d
join student s on d.department_id = s.department_id
join enrollment e on s.student_id = e.student_id
join courses  c on e.course_id = c.course_id
group by department_name;


--Query 9: list all professors who teach in more then one department.


select p.first_name , p.last_name from professors p
join courses c on p.professor_id = c.professor_id
group by p.first_name, p.last_name
having count(distinct c.department_id) > 1;

--Query 10: get the highest and lowest grade in a specific course (e.g. 'operating system').

select max(e.grade) as heighest_grades, min(e.grade) as lowest_grades
from enrollment e
join courses c on c.course_id = e.course_id 
where c.course_name = 'R&D Basics';
									
