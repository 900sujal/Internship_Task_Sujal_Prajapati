                              Internship Task - RDBMS and SQL Task #6(Doctor_Patient_Appointment_System)

table Creation:=>

// Create Departments Table
CREATE TABLE Departments (
    department_id INT PRIMARY KEY AUTO_INCREMENT,
    department_name VARCHAR(100) NOT NULL UNIQUE
);

//Create Specialties Table
CREATE TABLE Specialties (
    specialty_id INT PRIMARY KEY AUTO_INCREMENT,
    specialty_name VARCHAR(100) NOT NULL UNIQUE
);

 //Create Doctors Table
CREATE TABLE Doctors (
    doctor_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    department_id INT NOT NULL,
    specialty_id INT NOT NULL,
    joining_date DATE NOT NULL,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (specialty_id) REFERENCES Specialties(specialty_id) ON DELETE CASCADE ON UPDATE CASCADE
);

//Create Patients Table
CREATE TABLE Patients (
    patient_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL,
    date_of_birth DATE NOT NULL,
    gender VARCHAR(10) NOT NULL,
    address TEXT NOT NULL
);

//Create Appointments Table
CREATE TABLE Appointments (
    appointment_id INT PRIMARY KEY AUTO_INCREMENT,
    doctor_id INT NOT NULL,
    patient_id INT NOT NULL,
    appointment_date DATETIME NOT NULL,
    reason TEXT NOT NULL,
    status VARCHAR(20) NOT NULL,
    FOREIGN KEY (doctor_id) REFERENCES Doctors(doctor_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id) ON DELETE CASCADE ON UPDATE CASCADE
);

//Create Payments Table
CREATE TABLE Payments (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    appointment_id INT NOT NULL,
    payment_date DATE NOT NULL,
    payment_amount DECIMAL(10, 2) NOT NULL,
    payment_method VARCHAR(20) NOT NULL,
    FOREIGN KEY (appointment_id) REFERENCES Appointments(appointment_id) ON DELETE CASCADE ON UPDATE CASCADE
);
=================================================================================================================

Insert Data All Tbale:-

INSERT INTO Departments (department_name) VALUES
('Cardiology'),
('Neurology'),
('Orthopedics'),
('Dermatology'),
('Pediatrics'),
('Radiology'),
('Oncology'),
('Gastroenterology'),
('Urology'),
('Psychiatry'),
('Gynecology'),
('Ophthalmology'),
('ENT'),
('Anesthesiology'),
('Nephrology');

INSERT INTO Specialties (specialty_name) VALUES
('Cardiologist'),
('Neurologist'),
('Orthopedic Surgeon'),
('Dermatologist'),
('Pediatrician'),
('Radiologist'),
('Oncologist'),
('Gastroenterologist'),
('Urologist'),
('Psychiatrist'),
('Gynecologist'),
('Ophthalmologist'),
('ENT Specialist'),
('Anesthesiologist'),
('Nephrologist');

INSERT INTO Doctors (first_name, last_name, email, phone, department_id, specialty_id, joining_date) VALUES
('Rajesh', 'Sharma', 'rajesh.sharma@example.com', '9876543210', 1, 1, '2015-06-01'),
('Priya', 'Verma', 'priya.verma@example.com', '9876543211', 2, 2, '2017-08-12'),
('Amit', 'Singh', 'amit.singh@example.com', '9876543212', 3, 3, '2018-04-25'),
('Nidhi', 'Kumar', 'nidhi.kumar@example.com', '9876543213', 4, 4, '2020-03-15'),
('Ankit', 'Rao', 'ankit.rao@example.com', '9876543214', 5, 5, '2016-11-07'),
('Sneha', 'Patel', 'sneha.patel@example.com', '9876543215', 6, 6, '2019-09-20'),
('Vikas', 'Gupta', 'vikas.gupta@example.com', '9876543216', 7, 7, '2013-12-11'),
('Komal', 'Jain', 'komal.jain@example.com', '9876543217', 8, 8, '2021-01-18'),
('Ravi', 'Yadav', 'ravi.yadav@example.com', '9876543218', 9, 9, '2014-05-30'),
('Anjali', 'Mehta', 'anjali.mehta@example.com', '9876543219', 10, 10, '2018-07-24'),
('Kunal', 'Desai', 'kunal.desai@example.com', '9876543220', 11, 11, '2017-10-15'),
('Pooja', 'Shah', 'pooja.shah@example.com', '9876543221', 12, 12, '2019-06-28'),
('Rahul', 'Joshi', 'rahul.joshi@example.com', '9876543222', 13, 13, '2016-02-22'),
('Ruchi', 'Kapoor', 'ruchi.kapoor@example.com', '9876543223', 14, 14, '2022-04-05'),
('Sameer', 'Malhotra', 'sameer.malhotra@example.com', '9876543224', 15, 15, '2020-12-10');


INSERT INTO Patients (first_name, last_name, email, phone, date_of_birth, gender, address) VALUES
('Arjun', 'Sharma', 'arjun.sharma@example.com', '9876554321', '1990-05-12', 'Male', 'Delhi, India'),
('Meera', 'Nair', 'meera.nair@example.com', '9876554322', '1995-03-24', 'Female', 'Mumbai, India'),
('Rohan', 'Khanna', 'rohan.khanna@example.com', '9876554323', '1988-11-10', 'Male', 'Bangalore, India'),
('Neha', 'Bansal', 'neha.bansal@example.com', '9876554324', '1992-07-15', 'Female', 'Pune, India'),
('Aditya', 'Jain', 'aditya.jain@example.com', '9876554325', '1985-01-22', 'Male', 'Chennai, India'),
('Simran', 'Kaur', 'simran.kaur@example.com', '9876554326', '1997-08-05', 'Female', 'Kolkata, India'),
('Vikram', 'Roy', 'vikram.roy@example.com', '9876554327', '1993-12-30', 'Male', 'Hyderabad, India'),
('Aisha', 'Ahmed', 'aisha.ahmed@example.com', '9876554328', '1999-09-17', 'Female', 'Lucknow, India'),
('Karan', 'Malik', 'karan.malik@example.com', '9876554329', '1986-02-11', 'Male', 'Jaipur, India'),
('Tanya', 'Ghosh', 'tanya.ghosh@example.com', '9876554330', '1991-10-07', 'Female', 'Patna, India'),
('Ishaan', 'Dixit', 'ishaan.dixit@example.com', '9876554331', '1994-04-18', 'Male', 'Surat, India'),
('Ritika', 'Pandey', 'ritika.pandey@example.com', '9876554332', '1990-06-14', 'Female', 'Indore, India'),
('Naveen', 'Iyer', 'naveen.iyer@example.com', '9876554333', '1987-03-25', 'Male', 'Ahmedabad, India'),
('Sanya', 'Chopra', 'sanya.chopra@example.com', '9876554334', '1996-12-08', 'Female', 'Noida, India'),
('Varun', 'Thakur', 'varun.thakur@example.com', '9876554335', '1989-09-03', 'Male', 'Gurgaon, India');

INSERT INTO Appointments (doctor_id, patient_id, appointment_date, reason, status) VALUES
(1, 1, '2023-12-01 10:00:00', 'Routine Checkup', 'Scheduled'),
(2, 2, '2023-12-02 11:30:00', 'Headache and Dizziness', 'Scheduled'),
(3, 3, '2023-12-03 09:15:00', 'Knee Pain', 'Completed'),
(4, 4, '2023-12-04 14:00:00', 'Skin Rash', 'Scheduled'),
(5, 5, '2023-12-05 15:45:00', 'Child Vaccination', 'Cancelled'),
(6, 6, '2023-12-06 10:30:00', 'X-Ray', 'Completed'),
(7, 7, '2023-12-07 12:00:00', 'Cancer Consultation', 'Scheduled'),
(8, 8, '2023-12-08 11:00:00', 'Stomach Pain', 'Completed'),
(9, 9, '2023-12-09 13:30:00', 'Urinary Infection', 'Cancelled'),
(10, 10, '2023-12-10 16:00:00', 'Depression Counseling', 'Scheduled'),
(11, 11, '2023-12-11 10:45:00', 'Pregnancy Checkup', 'Completed'),
(12, 12, '2023-12-12 09:00:00', 'Eye Checkup', 'Scheduled'),
(13, 13, '2023-12-13 14:30:00', 'Ear Pain', 'Completed'),
(14, 14, '2023-12-14 12:15:00', 'Pre-Surgery Consultation', 'Scheduled'),
(15, 15, '2023-12-15 15:00:00', 'Kidney Stones', 'Completed');


INSERT INTO Payments (appointment_id, payment_date, payment_amount, payment_method) VALUES
(1, '2023-12-01', 500.00, 'Cash'),
(2, '2023-12-02', 1000.00, 'Credit Card'),
(3, '2023-12-03', 1500.00, 'Insurance'),
(4, '2023-12-04', 700.00, 'Cash'),
(6, '2023-12-06', 800.00, 'Credit Card'),
(7, '2023-12-07', 2000.00, 'Insurance'),
(8, '2023-12-08', 1200.00, 'Cash'),
(10, '2023-12-10', 900.00, 'Credit Card'),
(11, '2023-12-11', 1300.00, 'Insurance'),
(12, '2023-12-12', 400.00, 'Cash'),
(13, '2023-12-13', 600.00, 'Credit Card'),
(14, '2023-12-14', 1800.00, 'Insurance'),
(15, '2023-12-15', 2500.00, 'Cash'),
(5, '2023-12-05', 0.00, 'Cancelled'),
(9, '2023-12-09', 0.00, 'Cancelled');
===============================================================================================================
1. Find the Total Number of Appointments for Each Doctor
SELECT 
    d.doctor_id,
    CONCAT(d.first_name, ' ', d.last_name) AS doctor_name,
    COUNT(a.appointment_id) AS total_appointments
FROM 
    Doctors d
LEFT JOIN 
    Appointments a ON d.doctor_id = a.doctor_id
GROUP BY 
    d.doctor_id, doctor_name
ORDER BY 
    total_appointments DESC;

2. List All Patients Who Have an Appointment with a Specific Doctor (e.g., Dr. John Smith)
SELECT 
    p.patient_id,
    CONCAT(p.first_name, ' ', p.last_name) AS patient_name,
    a.appointment_date,
    a.reason,
    a.status
FROM 
    Patients p
JOIN 
    Appointments a ON p.patient_id = a.patient_id
JOIN 
    Doctors d ON a.doctor_id = d.doctor_id
WHERE 
    CONCAT(d.first_name, ' ', d.last_name) = 'Vikas Gupta'
ORDER BY 
    a.appointment_date;

3. Find the Number of Appointments Scheduled in a Specific Department

SELECT 
    dep.department_id,
    dep.department_name,
    COUNT(a.appointment_id) AS total_appointments
FROM 
    Departments dep
JOIN 
    Doctors d ON dep.department_id = d.department_id
JOIN 
    Appointments a ON d.doctor_id = a.doctor_id
WHERE 
    dep.department_name = 'Cardiology' -- Replace 'Cardiology' with the desired department name
GROUP BY 
    dep.department_id, dep.department_name;

4. Find the Most Popular Specialty Based on Number of Appointments

SELECT 
    s.specialty_id,
    s.specialty_name,
    COUNT(a.appointment_id) AS total_appointments
FROM 
    Specialties s
JOIN 
    Doctors d ON s.specialty_id = d.specialty_id
JOIN 
    Appointments a ON d.doctor_id = a.doctor_id
GROUP BY 
    s.specialty_id, s.specialty_name
ORDER BY 
    total_appointments DESC
LIMIT 1;
SELECT * FROM `Departments` WHERE 1

5. Get the Total Payment Amount for All Completed Appointments
SELECT 
    SUM(p.payment_amount) AS total_payments
FROM 
    Payments p
JOIN 
    Appointments a ON p.appointment_id = a.appointment_id
WHERE 
    a.status = 'Completed';

6. Find the Number of Patients Seen by Each Doctor

SELECT 
    d.doctor_id,
    CONCAT(d.first_name, ' ', d.last_name) AS doctor_name,
    COUNT(DISTINCT a.patient_id) AS patients_seen
FROM 
    Doctors d
JOIN 
    Appointments a ON d.doctor_id = a.doctor_id
GROUP BY 
    d.doctor_id, doctor_name
ORDER BY 
    patients_seen DESC;

7. List All Patients Who Have Missed Their Appointments (Status 'Cancelled')

SELECT 
    p.patient_id,
    CONCAT(p.first_name, ' ', p.last_name) AS patient_name,
    a.appointment_date,
    a.reason
FROM 
    Patients p
JOIN 
    Appointments a ON p.patient_id = a.patient_id
WHERE 
    a.status = 'Cancelled'
ORDER BY 
    a.appointment_date;

8. List All Patients Who Have Missed Their Appointments (Status 'Cancelled')

SELECT 
    a.status,
    COUNT(a.appointment_id) AS total_appointments
FROM 
    Appointments a
GROUP BY 
    a.status
ORDER BY 
    total_appointments DESC;

9. Get the Average Payment Amount for Completed Appointments

SELECT 
    AVG(p.payment_amount) AS average_payment
FROM 
    Payments p
JOIN 
    Appointments a ON p.appointment_id = a.appointment_id
WHERE 
    a.status = 'Completed';

10. Find the Doctor with the Highest Number of Appointments

SELECT 
    d.doctor_id,
    CONCAT(d.first_name, ' ', d.last_name) AS doctor_name,
    COUNT(a.appointment_id) AS total_appointments
FROM 
    Doctors d
JOIN 
    Appointments a ON d.doctor_id = a.doctor_id
GROUP BY 
    d.doctor_id, doctor_name
ORDER BY 
    total_appointments DESC
LIMIT 1;


